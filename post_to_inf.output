Terminals unused in grammar

   UMINUS


State 15 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: /* empty */
    2      | input line

    3 line: '\n'
    4     | expr '\n'

    5 expr: NUMBER
    6     | expr expr PLUS
    7     | expr expr MINUS
    8     | expr expr TIMES
    9     | expr expr DIVIDE
   10     | expr POWER expr POWER


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 3 4
error (256)
NUMBER (258) 5
PLUS (259) 6
MINUS (260) 7
TIMES (261) 8
DIVIDE (262) 9
POWER (263) 10
UMINUS (264)


Nonterminals, with rules where they appear

$accept (11)
    on left: 0
input (12)
    on left: 1 2, on right: 0 2
line (13)
    on left: 3 4, on right: 2
expr (14)
    on left: 5 6 7 8 9 10, on right: 4 6 7 8 9 10


state 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


state 1

    0 $accept: input . $end
    2 input: input . line

    $end    shift, and go to state 2
    NUMBER  shift, and go to state 3
    '\n'    shift, and go to state 4

    line  go to state 5
    expr  go to state 6


state 2

    0 $accept: input $end .

    $default  accept


state 3

    5 expr: NUMBER .

    $default  reduce using rule 5 (expr)


state 4

    3 line: '\n' .

    $default  reduce using rule 3 (line)


state 5

    2 input: input line .

    $default  reduce using rule 2 (input)


state 6

    4 line: expr . '\n'
    6 expr: expr . expr PLUS
    7     | expr . expr MINUS
    8     | expr . expr TIMES
    9     | expr . expr DIVIDE
   10     | expr . POWER expr POWER

    NUMBER  shift, and go to state 3
    POWER   shift, and go to state 7
    '\n'    shift, and go to state 8

    expr  go to state 9


state 7

   10 expr: expr POWER . expr POWER

    NUMBER  shift, and go to state 3

    expr  go to state 10


state 8

    4 line: expr '\n' .

    $default  reduce using rule 4 (line)


state 9

    6 expr: expr . expr PLUS
    6     | expr expr . PLUS
    7     | expr . expr MINUS
    7     | expr expr . MINUS
    8     | expr . expr TIMES
    8     | expr expr . TIMES
    9     | expr . expr DIVIDE
    9     | expr expr . DIVIDE
   10     | expr . POWER expr POWER

    NUMBER  shift, and go to state 3
    PLUS    shift, and go to state 11
    MINUS   shift, and go to state 12
    TIMES   shift, and go to state 13
    DIVIDE  shift, and go to state 14
    POWER   shift, and go to state 7

    expr  go to state 9


state 10

    6 expr: expr . expr PLUS
    7     | expr . expr MINUS
    8     | expr . expr TIMES
    9     | expr . expr DIVIDE
   10     | expr . POWER expr POWER
   10     | expr POWER expr . POWER

    NUMBER  shift, and go to state 3
    POWER   shift, and go to state 15

    expr  go to state 9


state 11

    6 expr: expr expr PLUS .

    $default  reduce using rule 6 (expr)


state 12

    7 expr: expr expr MINUS .

    $default  reduce using rule 7 (expr)


state 13

    8 expr: expr expr TIMES .

    $default  reduce using rule 8 (expr)


state 14

    9 expr: expr expr DIVIDE .

    $default  reduce using rule 9 (expr)


state 15

   10 expr: expr POWER . expr POWER
   10     | expr POWER expr POWER .

    NUMBER  shift, and go to state 3

    NUMBER    [reduce using rule 10 (expr)]
    $default  reduce using rule 10 (expr)

    expr  go to state 10
